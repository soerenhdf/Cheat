-- GUI erstellen
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local Toggle = Instance.new("TextButton", ScreenGui)
Toggle.Size = UDim2.new(0, 150, 0, 50)
Toggle.Position = UDim2.new(0, 20, 0, 150)
Toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Toggle.TextColor3 = Color3.new(1, 1, 1)
Toggle.Text = "Start AI"
Toggle.TextScaled = true

-- Variablen
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")
local KI_ACTIVE = false
local lastJumpTime = 0
local jumpCooldown = 0.5
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
raycastParams.FilterDescendantsInstances = {char}

-- ESP Funktion
local function createESP(part)
    if part:IsA("BasePart") and not part:FindFirstChild("ESP") then
        local box = Instance.new("BoxHandleAdornment")
        box.Name = "ESP"
        box.Adornee = part
        box.AlwaysOnTop = true
        box.ZIndex = 0
        box.Size = part.Size + Vector3.new(0.1, 0.1, 0.1)
        box.Transparency = 0.5
        box.Color3 = Color3.new(0, 1, 0)
        box.Parent = part
    end
end

-- Alle Teile im Workspace markieren
for _, obj in pairs(workspace:GetDescendants()) do
    createESP(obj)
end

-- Neue Objekte beobachten
workspace.DescendantAdded:Connect(function(obj)
    task.wait(0.1)
    createESP(obj)
end)

-- Hindernis-Jump
local function jumpIfObstacle()
    local front = hrp.Position + hrp.CFrame.LookVector * 4 + Vector3.new(0, 2, 0)
    local ray = workspace:Raycast(front, Vector3.new(0, -4, 0), raycastParams)
    if ray and tick() - lastJumpTime > jumpCooldown then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        lastJumpTime = tick()
    end
end

-- Suche n√§chste Plattform
local function findNextPlatform()
    for dist = 5, 30, 2 do
        local checkPos = hrp.Position + hrp.CFrame.LookVector * dist
        local rayOrigin = checkPos + Vector3.new(0, 5, 0)
        local rayDir = Vector3.new(0, -10, 0)
        local result = workspace:Raycast(rayOrigin, rayDir, raycastParams)
        if result then
            return result.Position
        end
    end
    return nil
end

-- KI Loop
RunService.RenderStepped:Connect(function()
    if KI_ACTIVE then
        local groundBelow = workspace:Raycast(hrp.Position, Vector3.new(0, -5, 0), raycastParams)

        if groundBelow then
            humanoid:Move(Vector3.new(0, 0, -1), false)
            jumpIfObstacle()
        else
            local nextPlatform = findNextPlatform()
            if nextPlatform then
                local direction = (nextPlatform - hrp.Position).Unit
                humanoid:Move(direction, false)
                if (nextPlatform - hrp.Position).Magnitude < 7 and tick() - lastJumpTime > jumpCooldown then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    lastJumpTime = tick()
                end
            else
                humanoid:Move(Vector3.zero, false)
            end
        end
    end
end)

-- Button Funktion
Toggle.MouseButton1Click:Connect(function()
    KI_ACTIVE = not KI_ACTIVE
    Toggle.Text = KI_ACTIVE and "Stop AI" or "Start AI"
end)
